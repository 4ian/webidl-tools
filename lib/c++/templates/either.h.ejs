#ifndef <%- headerDefine('either') %>
#define <%- headerDefine('either') %>

#include "nan.h"
#include "v8.h"

#include "webrtc/base/optional.h"

namespace <%- namespace %> {

template <typename L, typename R>
class Either  {
 public:
  Either<L, R>() {}

  static Either<L, R> Left(L left) {
    return Either(rtc::Optional<L>(left), rtc::Optional<R>());
  }

  static Either<L, R> Right(R right) {
    return Either(rtc::Optional<L>(), rtc::Optional<R>(right));
  }

  bool IsLeft() { return bool(_left); }
  bool IsRight() { return bool(_right); }

  // Conversion to bool to test if we have a value.
  explicit operator bool() { return IsRight(); }

  // Dereferencing.
  R* operator->() { return &(*_right); }
  R& operator*() { return *_right; }

  L left() { return *_left; }
  L left_or(L default_val) { return _left.value_or(default_val); }

  R right() { return *_right; }
  R right_or(R default_val) { return _right.value_or(default_val); }

 private:
  Either(
    rtc::Optional<L> left,
    rtc::Optional<R> right):
      _left(left),
      _right(right) {}

  rtc::Optional<L> _left;
  rtc::Optional<R> _right;
};

}  // <%- namespace %>

#endif  // <%- headerDefine('either') %>
