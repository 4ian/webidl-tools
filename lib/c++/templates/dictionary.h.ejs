class <%- className(node) %> {
 public:
<%_ if (!node.members.length) { _%>
<%- '  ' + className(node) + '() {};' -%>
<%_ } else { _%>
  <%- className(node) %>(
<%_ node.members.forEach((member, i) => { _%>
    <%- argumentType(member) %> <%- argumentName(member) %><%- i < node.members.length - 1 ? ',' : '):' %>
<%_ }) _%>
<%_ node.members.forEach((member, i) => { _%>
      <%- privateMemberName(member) %>(<%- initialize(member) %>)<%- i === node.members.length - 1 ? ' {};' : ',' %>
<%_ }) _%>
<%_ } _%>

<%_ node.members.forEach(member => { _%>
  <%- publicMemberType(member) %> <%- publicMemberName(member) %>() { return <%- privateMemberName(member) %>; };
<%_ }) _%>

  v8::Local<v8::Value> ToV8();
  static Nan::Maybe<<%- className(node) %>*> FromV8(v8::Local<v8::Value> unparsed, std::string *error);
<%_ if (node.members.length) { _%>

 private:
<%_ node.members.forEach(member => { _%>
  <%- privateMemberType(member) %> <%- privateMemberName(member) %>;
<%_ }) _%>
<%_ } _%>
};
