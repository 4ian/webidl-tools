class <%- className(node) %> {
 public:
  <%-  className(node) %>() {}
<%_ if (node.members.length) { _%>

  <%- className(node) %>(
<%_ node.members.forEach((member, i) => { _%>
    <%- argumentType(member) %> <%- argumentName(member) %><%- i < node.members.length - 1 ? ',' : '):' %>
<%_ }) _%>
<%_ node.members.forEach((member, i) => { _%>
      <%- privateMemberName(member) %>(<%- initialize(member) %>)<%- i === node.members.length - 1 ? ' {}' : ',' %>
<%_ }) _%>
<%_ } _%>

<%_ node.members.forEach(member => { _%>
  <%- publicMemberType(member) %> <%- publicMemberName(member) %>() { return <%- privateMemberName(member) %>; };
<%_ }) _%>

  v8::Local<v8::Value> ToV8();
  static Either<std::string, <%- className(node) %>> FromV8(v8::Local<v8::Value> value);
<%_ if (node.members.length) { _%>

 private:
<%_ node.members.forEach(member => { _%>
  <%- privateMemberType(member) %> <%- privateMemberName(member) %>;
<%_ }) _%>
<%_ } _%>
};

template<>
struct Convert<<%- className(node) %>, v8::Local<v8::Value>> {
  static Either<std::string, <%- className(node) %>> From(v8::Local<v8::Value> value) {
    Nan::HandleScope scope;
    return <%- className(node) %>::FromV8(value);
  }

  static v8::Local<v8::Value> To(<%- className(node) %> value) {
    Nan::EscapableHandleScope scope;
    return scope.Escape(value.ToV8());
  }
};
